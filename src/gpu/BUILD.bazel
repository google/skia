load("//bazel:skia_rules.bzl", "exports_files_legacy", "select_multi", "skia_cc_deps", "skia_filegroup", "split_srcs_and_hdrs")
load("//bazel:flags.bzl", "bool_flag", "selects", "string_flag_with_values")

licenses(["notice"])

exports_files_legacy()

# In own group for exporting to //gn/gpu.gni:skia_shared_gpu_sources.
SHARED_FILES = [
    "AsyncReadTypes.h",
    "AtlasTypes.cpp",
    "AtlasTypes.h",
    "Blend.cpp",
    "Blend.h",
    "BlendFormula.cpp",
    "BlendFormula.h",
    "BlurUtils.cpp",
    "BlurUtils.h",
    "BufferWriter.h",
    "DitherUtils.cpp",
    "DitherUtils.h",
    "GpuTypesPriv.h",
    "KeyBuilder.h",
    "MutableTextureStateRef.h",
    "PipelineUtils.cpp",
    "PipelineUtils.h",
    "Rectanizer.h",
    "RectanizerPow2.cpp",
    "RectanizerPow2.h",
    "RectanizerSkyline.cpp",
    "RectanizerSkyline.h",
    "RefCntedCallback.h",
    "ResourceKey.cpp",
    "ResourceKey.h",
    "SkBackingFit.h",
    "Swizzle.cpp",
    "Swizzle.h",
    "TiledTextureUtils.cpp",
    "TiledTextureUtils.h",
]

split_srcs_and_hdrs(
    name = "shared",
    files = SHARED_FILES,
)

CORE_FILES = [
    "ShaderErrorHandler.cpp",
    "SkRenderEngineAbortf.h",
]

split_srcs_and_hdrs(
    name = "core",
    files = CORE_FILES,
)

string_flag_with_values(
    name = "gpu_backend",
    multiple = True,
    values = [
        "gl_ganesh",
        "metal_ganesh",
        "vulkan_ganesh",
        "dawn_graphite",
        "metal_graphite",
        "vulkan_graphite",
    ],
)

string_flag_with_values(
    name = "with_gl_standard",
    values = [
        "gles_standard",
        "gl_standard",
        "webgl_standard",
    ],
)

selects.config_setting_group(
    name = "has_ganesh_backend",
    match_any = [
        ":gl_ganesh",
        ":metal_ganesh",
        ":vulkan_ganesh",
    ],
    visibility = ["//:__subpackages__"],
)

selects.config_setting_group(
    name = "has_graphite_backend",
    match_any = [
        ":dawn_graphite",
        ":metal_graphite",
        ":vulkan_graphite",
    ],
    visibility = ["//:__subpackages__"],
)

selects.config_setting_group(
    name = "vulkan_with_vma",
    match_all = [
        ":vulkan_ganesh",
        ":use_vulkan_memory_allocator_true",
    ],
    visibility = ["//:__subpackages__"],
)

bool_flag(
    name = "use_vulkan_memory_allocator",
    default = True,
    public = False,  # Users should use :vulkan_with_vma
)

bool_flag(
    name = "enable_gpu_test_utils",
    default = False,
)

selects.config_setting_group(
    name = "has_dawn",
    match_any = [
        ":dawn_graphite",
    ],
)

selects.config_setting_group(
    name = "has_metal",
    match_any = [
        ":metal_ganesh",
        ":metal_graphite",
    ],
)

selects.config_setting_group(
    name = "has_vulkan",
    match_any = [
        ":vulkan_ganesh",
        ":vulkan_graphite",
    ],
)

skia_filegroup(
    name = "srcs",
    srcs = [
        ":core_srcs",
        ":shared_srcs",
        "//src/gpu/ganesh:srcs",
        "//src/gpu/tessellate:srcs",
    ] + select_multi(
        {
            ":has_dawn": ["//src/gpu/dawn:srcs"],
            ":has_vulkan": ["//src/gpu/vk:srcs"],
        },
    ),
    visibility = ["//src:__pkg__"],
)

skia_filegroup(
    name = "objc_srcs",
    srcs = [
        "//src/gpu/ganesh:objc_srcs",
        "//src/gpu/mtl:shared_objc_srcs",
    ],
    visibility = ["//src:__pkg__"],
)

skia_filegroup(
    name = "private_hdrs",
    srcs = [
        ":core_hdrs",
        ":shared_hdrs",
        "//src/gpu/ganesh:private_hdrs",
        "//src/gpu/tessellate:private_hdrs",
    ] + select_multi(
        {
            ":has_dawn": ["//src/gpu/dawn:private_hdrs"],
            ":has_vulkan": ["//src/gpu/vk:private_hdrs"],
            ":has_metal": ["//src/gpu/mtl:private_hdrs"],
        },
    ),
    visibility = ["//src:__pkg__"],
)

skia_cc_deps(
    name = "deps",
    visibility = ["//src:__pkg__"],
    deps = [
        "//src/gpu/ganesh:deps",
    ] + select_multi(
        {
            ":has_vulkan": ["//src/gpu/vk:deps"],
        },
    ),
)
