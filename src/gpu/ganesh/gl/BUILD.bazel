load("//bazel:skia_rules.bzl", "skia_cc_library", "skia_filegroup", "split_srcs_and_hdrs")

package(
    default_applicable_licenses = ["//:license"],
)

licenses(["notice"])

CORE_FILES = [
    "GrGLAssembleGLESInterfaceAutogen.cpp",
    "GrGLAssembleGLInterfaceAutogen.cpp",
    "GrGLAssembleHelpers.cpp",
    "GrGLAssembleInterface.cpp",
    "GrGLAssembleWebGLInterfaceAutogen.cpp",
    "GrGLAttachment.cpp",
    "GrGLAttachment.h",
    "GrGLBuffer.cpp",
    "GrGLBuffer.h",
    "GrGLCaps.cpp",
    "GrGLCaps.h",
    "GrGLContext.cpp",
    "GrGLContext.h",
    "GrGLCoreFunctions.h",
    "GrGLDefines.h",
    "GrGLDirectContext.cpp",
    "GrGLExtensions.cpp",
    "GrGLBackendSurface.cpp",
    "GrGLBackendSurfacePriv.h",
    "GrGLFinishCallbacks.cpp",
    "GrGLFinishCallbacks.h",
    "GrGLGLSL.cpp",
    "GrGLGLSL.h",
    "GrGLGpu.cpp",
    "GrGLGpu.h",
    "GrGLGpuProgramCache.cpp",
    "GrGLInterfaceAutogen.cpp",
    "GrGLOpsRenderPass.cpp",
    "GrGLOpsRenderPass.h",
    "GrGLProgram.cpp",
    "GrGLProgram.h",
    "GrGLProgramDataManager.cpp",
    "GrGLProgramDataManager.h",
    "GrGLRenderTarget.cpp",
    "GrGLRenderTarget.h",
    "GrGLSemaphore.cpp",
    "GrGLSemaphore.h",
    "GrGLTexture.cpp",
    "GrGLTexture.h",
    "GrGLTextureRenderTarget.cpp",
    "GrGLTextureRenderTarget.h",
    "GrGLTypesPriv.cpp",
    "GrGLTypesPriv.h",
    "GrGLUniformHandler.cpp",
    "GrGLUniformHandler.h",
    "GrGLUtil.cpp",
    "GrGLUtil.h",
    "GrGLVaryingHandler.h",
    "GrGLVertexArray.cpp",
    "GrGLVertexArray.h",
]

split_srcs_and_hdrs(
    name = "core",
    files = CORE_FILES,
)

# In own group for mapping to //gn/gpu.gni:skia_null_gpu_sources.
skia_filegroup(
    name = "native_interface_none",
    srcs = ["GrGLMakeNativeInterface_none.cpp"],
)

skia_filegroup(
    name = "android_srcs",
    srcs = ["AHardwareBufferGL.cpp"],
)

skia_cc_library(
    name = "ganesh_gl",
    srcs = [
        ":core_hdrs",
        ":core_srcs",
        "//src/gpu/ganesh/gl/builders:builder_hdrs",
        "//src/gpu/ganesh/gl/builders:builder_srcs",
    ],
    hdrs = [
        "//include/gpu:shared_gpu_hdrs",
        "//include/gpu/ganesh:ganesh_hdrs",
        "//include/gpu/ganesh/gl:public_hdrs",
    ],
    defines = [
        "SK_DISABLE_LEGACY_GL_MAKE_NATIVE_INTERFACE",
        "SK_GL",
    ],
    features = ["layering_check"],
    visibility = ["//:__pkg__"],
    deps = [
        "//:core",
        "//src/base",
        "//src/core:core_priv",
        "//src/gpu",
        "//src/gpu/ganesh",
        "//src/sksl/codegen:glsl",
    ],
)

skia_cc_library(
    name = "ganesh_gl_TEST_UTIL",
    testonly = True,
    srcs = [
        ":core_hdrs",
        ":core_srcs",
        "//src/gpu/ganesh/gl/builders:builder_hdrs",
        "//src/gpu/ganesh/gl/builders:builder_srcs",
    ],
    hdrs = [
        "//include/gpu:shared_gpu_hdrs",
        "//include/gpu/ganesh:ganesh_hdrs",
        "//include/gpu/ganesh/gl:public_hdrs",
    ],
    defines = [
        "SK_DISABLE_LEGACY_GL_MAKE_NATIVE_INTERFACE",
        "GPU_TEST_UTILS",
        "SK_GL",
    ],
    features = ["layering_check"],
    visibility = [
        "//modules/skottie:__pkg__",
        "//src/gpu/ganesh/gl:__subpackages__",
        "//tools:__subpackages__",
    ],
    deps = [
        "//:core",
        "//src/base",
        "//src/core:core_priv",
        "//src/gpu",
        "//src/gpu/ganesh:ganesh_TEST_UTIL",
        "//src/sksl/codegen:glsl",
    ],
)
