load("//bazel:skia_rules.bzl", "exports_files_legacy", "select_multi", "skia_cc_deps", "skia_filegroup", "split_srcs_and_hdrs")

licenses(["notice"])

exports_files_legacy()

# In separate groups for exporting to sksl.gni:skslc_deps.
SKSLC_FILES = [
    "GrMemoryPool.cpp",
    "GrMemoryPool.h",
]

split_srcs_and_hdrs(
    name = "core_skslc",
    files = SKSLC_FILES,
)

CORE_FILES = [
    "ClipStack.cpp",
    "ClipStack.h",
    "Device.cpp",
    "Device_drawTexture.cpp",
    "Device_v1.h",
    "GrAHardwareBufferImageGenerator.cpp",
    "GrAHardwareBufferImageGenerator.h",
    "GrAHardwareBufferUtils.cpp",
    "GrAHardwareBufferUtils_impl.h",
    "GrAppliedClip.h",
    "GrAttachment.cpp",
    "GrAttachment.h",
    "GrAuditTrail.cpp",
    "GrAuditTrail.h",
    "GrAutoLocaleSetter.h",
    "GrBackendSemaphore.cpp",
    "GrBackendSurface.cpp",
    "GrBackendTextureImageGenerator.cpp",
    "GrBackendTextureImageGenerator.h",
    "GrBackendUtils.cpp",
    "GrBackendUtils.h",
    "GrBaseContextPriv.h",
    "GrBlurUtils.cpp",
    "GrBlurUtils.h",
    "GrBuffer.h",
    "GrBufferAllocPool.cpp",
    "GrBufferAllocPool.h",
    "GrBufferTransferRenderTask.cpp",
    "GrBufferTransferRenderTask.h",
    "GrBufferUpdateRenderTask.cpp",
    "GrBufferUpdateRenderTask.h",
    "GrCaps.cpp",
    "GrCaps.h",
    "GrClientMappedBufferManager.cpp",
    "GrClientMappedBufferManager.h",
    "GrClip.h",
    "GrColor.h",
    "GrColorInfo.cpp",
    "GrColorInfo.h",
    "GrColorSpaceXform.cpp",
    "GrColorSpaceXform.h",
    "GrContextThreadSafeProxy.cpp",
    "GrContextThreadSafeProxyPriv.h",
    "GrContext_Base.cpp",
    "GrCopyRenderTask.cpp",
    "GrCopyRenderTask.h",
    "GrCpuBuffer.h",
    "GrDDLContext.cpp",
    "GrDDLTask.cpp",
    "GrDDLTask.h",
    "GrDataUtils.cpp",
    "GrDataUtils.h",
    "GrDefaultGeoProcFactory.cpp",
    "GrDefaultGeoProcFactory.h",
    "GrDeferredProxyUploader.h",
    "GrDeferredUpload.h",
    "GrDirectContext.cpp",
    "GrDirectContextPriv.cpp",
    "GrDirectContextPriv.h",
    "GrDistanceFieldGenFromVector.cpp",
    "GrDistanceFieldGenFromVector.h",
    "GrDrawIndirectCommand.h",
    "GrDrawOpAtlas.cpp",
    "GrDrawOpAtlas.h",
    "GrDrawOpTest.cpp",
    "GrDrawOpTest.h",
    "GrDrawingManager.cpp",
    "GrDrawingManager.h",
    "GrDriverBugWorkarounds.cpp",
    "GrDstProxyView.h",
    "GrDynamicAtlas.cpp",
    "GrDynamicAtlas.h",
    "GrEagerVertexAllocator.cpp",
    "GrEagerVertexAllocator.h",
    "GrFPArgs.h",
    "GrFinishCallbacks.cpp",
    "GrFinishCallbacks.h",
    "GrFixedClip.cpp",
    "GrFixedClip.h",
    "GrFragmentProcessor.cpp",
    "GrFragmentProcessor.h",
    "GrGeometryProcessor.cpp",
    "GrGeometryProcessor.h",
    "GrGpu.cpp",
    "GrGpu.h",
    "GrGpuBuffer.cpp",
    "GrGpuBuffer.h",
    "GrGpuResource.cpp",
    "GrGpuResource.h",
    "GrGpuResourceCacheAccess.h",
    "GrGpuResourcePriv.h",
    "GrHashMapWithCache.h",
    "GrImageContext.cpp",
    "GrImageContextPriv.h",
    "GrImageInfo.cpp",
    "GrImageInfo.h",
    "GrManagedResource.cpp",
    "GrManagedResource.h",
    "GrMeshDrawTarget.cpp",
    "GrMeshDrawTarget.h",
    "GrNativeRect.h",
    "GrNonAtomicRef.h",
    "GrOnFlushResourceProvider.cpp",
    "GrOnFlushResourceProvider.h",
    "GrOpFlushState.cpp",
    "GrOpFlushState.h",
    "GrOpsRenderPass.cpp",
    "GrOpsRenderPass.h",
    "GrOpsTypes.h",
    "GrPaint.cpp",
    "GrPaint.h",
    "GrPersistentCacheUtils.cpp",
    "GrPersistentCacheUtils.h",
    "GrPinnableImage.cpp",
    "GrPipeline.cpp",
    "GrPipeline.h",
    "GrPixmap.h",
    "GrProcessor.cpp",
    "GrProcessor.h",
    "GrProcessorAnalysis.cpp",
    "GrProcessorAnalysis.h",
    "GrProcessorSet.cpp",
    "GrProcessorSet.h",
    "GrProcessorUnitTest.cpp",
    "GrProcessorUnitTest.h",
    "GrProgramDesc.cpp",
    "GrProgramDesc.h",
    "GrProgramInfo.cpp",
    "GrProgramInfo.h",
    "GrProxyProvider.cpp",
    "GrProxyProvider.h",
    "GrRecordingContext.cpp",
    "GrRecordingContextPriv.cpp",
    "GrRecordingContextPriv.h",
    "GrRefCnt.h",
    "GrRenderTarget.cpp",
    "GrRenderTarget.h",
    "GrRenderTargetProxy.cpp",
    "GrRenderTargetProxy.h",
    "GrRenderTask.cpp",
    "GrRenderTask.h",
    "GrRenderTaskCluster.cpp",
    "GrRenderTaskCluster.h",
    "GrResourceAllocator.cpp",
    "GrResourceAllocator.h",
    "GrResourceCache.cpp",
    "GrResourceCache.h",
    "GrResourceHandle.h",
    "GrResourceProvider.cpp",
    "GrResourceProvider.h",
    "GrResourceProviderPriv.h",
    "GrRingBuffer.cpp",
    "GrRingBuffer.h",
    "GrSPIRVUniformHandler.cpp",
    "GrSPIRVUniformHandler.h",
    "GrSPIRVVaryingHandler.cpp",
    "GrSPIRVVaryingHandler.h",
    "GrSWMaskHelper.cpp",
    "GrSWMaskHelper.h",
    "GrSamplerState.h",
    "GrScissorState.h",
    "GrSemaphore.h",
    "GrShaderCaps.cpp",
    "GrShaderCaps.h",
    "GrShaderVar.cpp",
    "GrShaderVar.h",
    "GrSimpleMesh.h",
    "GrStagingBufferManager.cpp",
    "GrStagingBufferManager.h",
    "GrStencilSettings.cpp",
    "GrStencilSettings.h",
    "GrStyle.cpp",
    "GrStyle.h",
    "GrSurface.cpp",
    "GrSurface.h",
    "GrSurfaceInfo.cpp",
    "GrSurfaceProxy.cpp",
    "GrSurfaceProxy.h",
    "GrSurfaceProxyPriv.h",
    "GrSurfaceProxyView.cpp",
    "GrSurfaceProxyView.h",
    "GrTTopoSort.h",
    "GrTestUtils.cpp",
    "GrTestUtils.h",
    "GrTexture.cpp",
    "GrTexture.h",
    "GrTextureProxy.cpp",
    "GrTextureProxy.h",
    "GrTextureProxyCacheAccess.h",
    "GrTextureProxyPriv.h",
    "GrTextureRenderTargetProxy.cpp",
    "GrTextureRenderTargetProxy.h",
    "GrTextureResolveManager.h",
    "GrTextureResolveRenderTask.cpp",
    "GrTextureResolveRenderTask.h",
    "GrThreadSafeCache.cpp",
    "GrThreadSafeCache.h",
    "GrThreadSafePipelineBuilder.cpp",
    "GrThreadSafePipelineBuilder.h",
    "GrTracing.h",
    "GrTransferFromRenderTask.cpp",
    "GrTransferFromRenderTask.h",
    "GrUniformDataManager.cpp",
    "GrUniformDataManager.h",
    "GrUserStencilSettings.h",
    "GrUtil.cpp",
    "GrUtil.h",
    "GrVertexChunkArray.cpp",
    "GrVertexChunkArray.h",
    "GrWaitRenderTask.cpp",
    "GrWaitRenderTask.h",
    "GrWindowRectangles.h",
    "GrWindowRectsState.h",
    "GrWritePixelsRenderTask.cpp",
    "GrWritePixelsRenderTask.h",
    "GrXferProcessor.cpp",
    "GrXferProcessor.h",
    "GrYUVABackendTextures.cpp",
    "GrYUVATextureProxies.cpp",
    "GrYUVATextureProxies.h",
    "PathRenderer.cpp",
    "PathRenderer.h",
    "PathRendererChain.cpp",
    "PathRendererChain.h",
    "SkGr.cpp",
    "SkGr.h",
    "StencilClip.h",
    "StencilMaskHelper.cpp",
    "StencilMaskHelper.h",
    "SurfaceContext.cpp",
    "SurfaceContext.h",
    "SurfaceDrawContext.cpp",
    "SurfaceDrawContext.h",
    "SurfaceFillContext.cpp",
    "SurfaceFillContext.h",
    "TestFormatColorTypeCombination.h",
]

split_srcs_and_hdrs(
    name = "core",
    files = CORE_FILES,
)

skia_filegroup(
    name = "srcs",
    srcs = [
        ":core_srcs",
        ":core_skslc_srcs",
        "//src/gpu/ganesh/effects:srcs",
        "//src/gpu/ganesh/glsl:srcs",
        "//src/gpu/ganesh/gradients:srcs",
        "//src/gpu/ganesh/geometry:srcs",
        "//src/gpu/ganesh/mock:srcs",  # TODO(kjlubick, egdaniel) should this be test only?
        "//src/gpu/ganesh/tessellate:srcs",
        "//src/gpu/ganesh/ops:srcs",
        "//src/gpu/ganesh/text:srcs",
    ] + select_multi(
        {
            "//src/gpu:dawn_backend": ["//src/gpu/ganesh/dawn:srcs"],
            "//src/gpu:gl_backend": ["//src/gpu/ganesh/gl:srcs"],
            "//src/gpu:vulkan_backend": ["//src/gpu/ganesh/vk:srcs"],
            # TODO(kjlubick) mtl and d3d backend
        },
    ),
    visibility = ["//src/gpu:__pkg__"],
)

skia_filegroup(
    name = "private_hdrs",
    srcs = [
        ":core_hdrs",
        ":core_skslc_hdrs",
        "//src/gpu/ganesh/effects:private_hdrs",
        "//src/gpu/ganesh/glsl:private_hdrs",
        "//src/gpu/ganesh/gradients:private_hdrs",
        "//src/gpu/ganesh/geometry:private_hdrs",
        "//src/gpu/ganesh/mock:private_hdrs",  # TODO(kjlubick, egdaniel) should this be test only?
        "//src/gpu/ganesh/tessellate:private_hdrs",
        "//src/gpu/ganesh/ops:private_hdrs",
        "//src/gpu/ganesh/text:private_hdrs",
    ] + select_multi(
        {
            "//src/gpu:dawn_backend": ["//src/gpu/ganesh/dawn:private_hdrs"],
            "//src/gpu:gl_backend": ["//src/gpu/ganesh/gl:private_hdrs"],
            "//src/gpu:vulkan_backend": ["//src/gpu/ganesh/vk:private_hdrs"],
            # TODO(kjlubick) mtl and d3d backend
        },
    ),
    visibility = ["//src/gpu:__pkg__"],
)

skia_cc_deps(
    name = "deps",
    visibility = ["//src/gpu:__pkg__"],
    deps = select_multi(
        {
            "//src/gpu:dawn_backend": ["//src/gpu/ganesh/dawn:deps"],
            "//src/gpu:gl_backend": ["//src/gpu/ganesh/gl:deps"],
            # TODO(kjlubick) mtl and d3d backend
        },
    ),
)
