load("//bazel:skia_rules.bzl", "generate_cpp_files_for_headers", "skia_filegroup")

package(
    default_applicable_licenses = ["//:license"],
)

licenses(["notice"])

# In own skia_filegroup for mapping to //gn/gpu.gni:skia_shared_gpu_sources.
SHARED_GPU_HEADERS = ["SingleOwner.h"]

skia_filegroup(
    name = "shared_gpu_private_hdrs",
    srcs = SHARED_GPU_HEADERS,
)

PRIVATE_HEADERS = [
    "SkAPI.h",
    "SkASAN.h",
    "SkAlign.h",
    "SkAlignedStorage.h",
    "SkAnySubclass.h",
    "SkAssert.h",
    "SkAttributes.h",
    "SkCPUTypes.h",
    "SkDebug.h",
    "SkFeatures.h",
    "SkFixed.h",
    "SkLoadUserConfig.h",
    "SkMacros.h",
    "SkMath.h",
    "SkMutex.h",
    "SkNoncopyable.h",
    "SkOnce.h",
    "SkPoint_impl.h",
    "SkSafe32.h",
    "SkSpan_impl.h",
    "SkTArray.h",
    "SkTFitsIn.h",
    "SkTLogic.h",
    "SkTPin.h",
    "SkTemplates.h",
    "SkThreadAnnotations.h",
    "SkTo.h",
    "SkTypeTraits.h",
    "SkContainers.h",
    "SkDeque.h",
    "SkFloatingPoint.h",
    "SkMalloc.h",
    "SkSemaphore.h",
    "SkTDArray.h",
    "SkThreadID.h",
]

skia_filegroup(
    name = "private_hdrs",
    srcs = PRIVATE_HEADERS + SHARED_GPU_HEADERS,
    visibility = [
        "//src/base:__pkg__",
        "//src/opts:__pkg__",
    ],
)

generate_cpp_files_for_headers(
    name = "headers_to_compile",
    headers = PRIVATE_HEADERS + SHARED_GPU_HEADERS,
)
